//
// File generated by rootcint at Sun Feb 19 08:27:22 2012

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "calibHdrDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::PerCalibReadoutHeader PerCalibReadoutHeader;
      #else
      class PerCalibReadoutHeader  :  public ::PerHeaderObject {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~PerCalibReadoutHeader() throw() {};
         unsigned int site; //
         unsigned int detector; //
         unsigned int triggerNumber; //
         unsigned int triggerType; //
         unsigned int triggerTimeSec; //
         unsigned int triggerTimeNanoSec; //
         unsigned int nHitsAD; //
         vector< float > timeAD; //
         vector< float > chargeAD; //
         vector< unsigned int > hitCountAD; //
         vector< unsigned int > ring; //
         vector< unsigned int > column; //
         unsigned int nHitsAD_calib; //
         vector< float > timeAD_calib; //
         vector< float > chargeAD_calib; //
         vector< unsigned int > hitCountAD_calib; //
         vector< unsigned int > topOrBottom; //
         vector< unsigned int > acuColumn; //
         unsigned int nHitsPool; //
         vector< float > timePool; //
         vector< float > chargePool; //
         vector< unsigned int > hitCountPool; //
         vector< unsigned int > wallNumber; //
         vector< unsigned int > wallSpot; //
         vector< unsigned int > inwardFacing; //
         unsigned int nHitsRpc; //
         vector< unsigned int > rpcRow; //
         vector< unsigned int > rpcColumn; //
         vector< unsigned int > rpcLayer; //
         vector< unsigned int > rpcStrip; //
         vector< bool > rpcFromRot; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void PerCalibReadoutHeader_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void PerCalibReadoutHeader_Dictionary();
   static void *new_PerCalibReadoutHeader(void *p = 0);
   static void *newArray_PerCalibReadoutHeader(Long_t size, void *p);
   static void delete_PerCalibReadoutHeader(void *p);
   static void deleteArray_PerCalibReadoutHeader(void *p);
   static void destruct_PerCalibReadoutHeader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::PerCalibReadoutHeader*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::PerCalibReadoutHeader) == sizeof(::ROOT::Shadow::PerCalibReadoutHeader));
      ::PerCalibReadoutHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::PerCalibReadoutHeader),0);
      static ::ROOT::TGenericClassInfo 
         instance("PerCalibReadoutHeader", "/common/dayabay/releases/NuWa/NuWa-16028/NuWa-trunk/dybgaudi/RootIO/PerCalibReadoutEvent/PerCalibReadoutEvent/PerCalibReadoutHeader.h", 16,
                  typeid(::PerCalibReadoutHeader), DefineBehavior(ptr, ptr),
                  (void*)&PerCalibReadoutHeader_ShowMembers, &PerCalibReadoutHeader_Dictionary, isa_proxy, 4,
                  sizeof(::PerCalibReadoutHeader) );
      instance.SetNew(&new_PerCalibReadoutHeader);
      instance.SetNewArray(&newArray_PerCalibReadoutHeader);
      instance.SetDelete(&delete_PerCalibReadoutHeader);
      instance.SetDeleteArray(&deleteArray_PerCalibReadoutHeader);
      instance.SetDestructor(&destruct_PerCalibReadoutHeader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::PerCalibReadoutHeader*)
   {
      return GenerateInitInstanceLocal((::PerCalibReadoutHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PerCalibReadoutHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void PerCalibReadoutHeader_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::PerCalibReadoutHeader*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void PerCalibReadoutHeader_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent)
   {
      // Inspect the data members of an object of class PerCalibReadoutHeader.
      typedef ::ROOT::Shadow::PerCalibReadoutHeader ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::PerCalibReadoutHeader*)0x0)->GetClass();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "site", &sobj->site);
      R__insp.Inspect(R__cl, R__parent, "detector", &sobj->detector);
      R__insp.Inspect(R__cl, R__parent, "triggerNumber", &sobj->triggerNumber);
      R__insp.Inspect(R__cl, R__parent, "triggerType", &sobj->triggerType);
      R__insp.Inspect(R__cl, R__parent, "triggerTimeSec", &sobj->triggerTimeSec);
      R__insp.Inspect(R__cl, R__parent, "triggerTimeNanoSec", &sobj->triggerTimeNanoSec);
      R__insp.Inspect(R__cl, R__parent, "nHitsAD", &sobj->nHitsAD);
      R__insp.Inspect(R__cl, R__parent, "timeAD", (void*)&sobj->timeAD);
      ::ROOT::GenericShowMembers("vector<float>", (void*)&sobj->timeAD, R__insp, strcat(R__parent,"timeAD."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "chargeAD", (void*)&sobj->chargeAD);
      ::ROOT::GenericShowMembers("vector<float>", (void*)&sobj->chargeAD, R__insp, strcat(R__parent,"chargeAD."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "hitCountAD", (void*)&sobj->hitCountAD);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->hitCountAD, R__insp, strcat(R__parent,"hitCountAD."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "ring", (void*)&sobj->ring);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->ring, R__insp, strcat(R__parent,"ring."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "column", (void*)&sobj->column);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->column, R__insp, strcat(R__parent,"column."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "nHitsAD_calib", &sobj->nHitsAD_calib);
      R__insp.Inspect(R__cl, R__parent, "timeAD_calib", (void*)&sobj->timeAD_calib);
      ::ROOT::GenericShowMembers("vector<float>", (void*)&sobj->timeAD_calib, R__insp, strcat(R__parent,"timeAD_calib."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "chargeAD_calib", (void*)&sobj->chargeAD_calib);
      ::ROOT::GenericShowMembers("vector<float>", (void*)&sobj->chargeAD_calib, R__insp, strcat(R__parent,"chargeAD_calib."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "hitCountAD_calib", (void*)&sobj->hitCountAD_calib);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->hitCountAD_calib, R__insp, strcat(R__parent,"hitCountAD_calib."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "topOrBottom", (void*)&sobj->topOrBottom);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->topOrBottom, R__insp, strcat(R__parent,"topOrBottom."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "acuColumn", (void*)&sobj->acuColumn);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->acuColumn, R__insp, strcat(R__parent,"acuColumn."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "nHitsPool", &sobj->nHitsPool);
      R__insp.Inspect(R__cl, R__parent, "timePool", (void*)&sobj->timePool);
      ::ROOT::GenericShowMembers("vector<float>", (void*)&sobj->timePool, R__insp, strcat(R__parent,"timePool."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "chargePool", (void*)&sobj->chargePool);
      ::ROOT::GenericShowMembers("vector<float>", (void*)&sobj->chargePool, R__insp, strcat(R__parent,"chargePool."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "hitCountPool", (void*)&sobj->hitCountPool);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->hitCountPool, R__insp, strcat(R__parent,"hitCountPool."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "wallNumber", (void*)&sobj->wallNumber);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->wallNumber, R__insp, strcat(R__parent,"wallNumber."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "wallSpot", (void*)&sobj->wallSpot);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->wallSpot, R__insp, strcat(R__parent,"wallSpot."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "inwardFacing", (void*)&sobj->inwardFacing);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->inwardFacing, R__insp, strcat(R__parent,"inwardFacing."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "nHitsRpc", &sobj->nHitsRpc);
      R__insp.Inspect(R__cl, R__parent, "rpcRow", (void*)&sobj->rpcRow);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->rpcRow, R__insp, strcat(R__parent,"rpcRow."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "rpcColumn", (void*)&sobj->rpcColumn);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->rpcColumn, R__insp, strcat(R__parent,"rpcColumn."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "rpcLayer", (void*)&sobj->rpcLayer);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->rpcLayer, R__insp, strcat(R__parent,"rpcLayer."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "rpcStrip", (void*)&sobj->rpcStrip);
      ::ROOT::GenericShowMembers("vector<unsigned int>", (void*)&sobj->rpcStrip, R__insp, strcat(R__parent,"rpcStrip."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "rpcFromRot", (void*)&sobj->rpcFromRot);
      ::ROOT::GenericShowMembers("vector<bool>", (void*)&sobj->rpcFromRot, R__insp, strcat(R__parent,"rpcFromRot."),false);
      R__parent[R__ncp] = 0;
      ::ROOT::GenericShowMembers("PerHeaderObject", ( ::PerHeaderObject * )( (::PerCalibReadoutHeader*) obj ), R__insp, R__parent, false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_PerCalibReadoutHeader(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::PerCalibReadoutHeader : new ::PerCalibReadoutHeader;
   }
   static void *newArray_PerCalibReadoutHeader(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::PerCalibReadoutHeader[nElements] : new ::PerCalibReadoutHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_PerCalibReadoutHeader(void *p) {
      delete ((::PerCalibReadoutHeader*)p);
   }
   static void deleteArray_PerCalibReadoutHeader(void *p) {
      delete [] ((::PerCalibReadoutHeader*)p);
   }
   static void destruct_PerCalibReadoutHeader(void *p) {
      typedef ::PerCalibReadoutHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::PerCalibReadoutHeader

namespace ROOT {
   void vectorlEboolgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEboolgR_Dictionary();
   static void *new_vectorlEboolgR(void *p = 0);
   static void *newArray_vectorlEboolgR(Long_t size, void *p);
   static void delete_vectorlEboolgR(void *p);
   static void deleteArray_vectorlEboolgR(void *p);
   static void destruct_vectorlEboolgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<bool>*)
   {
      vector<bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<bool>", -2, "vectorbool.dll", 0,
                  typeid(vector<bool>), DefineBehavior(ptr, ptr),
                  0, &vectorlEboolgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<bool>) );
      instance.SetNew(&new_vectorlEboolgR);
      instance.SetNewArray(&newArray_vectorlEboolgR);
      instance.SetDelete(&delete_vectorlEboolgR);
      instance.SetDeleteArray(&deleteArray_vectorlEboolgR);
      instance.SetDestructor(&destruct_vectorlEboolgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<bool> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEboolgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<bool>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool> : new vector<bool>;
   }
   static void *newArray_vectorlEboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool>[nElements] : new vector<bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEboolgR(void *p) {
      delete ((vector<bool>*)p);
   }
   static void deleteArray_vectorlEboolgR(void *p) {
      delete [] ((vector<bool>*)p);
   }
   static void destruct_vectorlEboolgR(void *p) {
      typedef vector<bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<bool>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEunsignedsPintgR_Dictionary();
   static void *new_vectorlEunsignedsPintgR(void *p = 0);
   static void *newArray_vectorlEunsignedsPintgR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPintgR(void *p);
   static void deleteArray_vectorlEunsignedsPintgR(void *p);
   static void destruct_vectorlEunsignedsPintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned int>*)
   {
      vector<unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned int>", -2, "vector.dll", 0,
                  typeid(vector<unsigned int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned int>) );
      instance.SetNew(&new_vectorlEunsignedsPintgR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPintgR);
      instance.SetDelete(&delete_vectorlEunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPintgR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned int> : new vector<unsigned int>;
   }
   static void *newArray_vectorlEunsignedsPintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned int>[nElements] : new vector<unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPintgR(void *p) {
      delete ((vector<unsigned int>*)p);
   }
   static void deleteArray_vectorlEunsignedsPintgR(void *p) {
      delete [] ((vector<unsigned int>*)p);
   }
   static void destruct_vectorlEunsignedsPintgR(void *p) {
      typedef vector<unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned int>

/********************************************************
* calibHdrDict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablecalibHdrDict();

extern "C" void G__set_cpp_environmentcalibHdrDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/common/dayabay/releases/NuWa/NuWa-16028/NuWa-trunk/dybgaudi/RootIO/PerCalibReadoutEvent/PerCalibReadoutEvent/PerCalibReadoutHeader.h");
  G__cpp_reset_tagtablecalibHdrDict();
}
#include <new>
extern "C" int G__cpp_dllrevcalibHdrDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* PerCalibReadoutHeader */
static int G__calibHdrDict_448_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PerCalibReadoutHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PerCalibReadoutHeader[n];
     } else {
       p = new((void*) gvp) PerCalibReadoutHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PerCalibReadoutHeader;
     } else {
       p = new((void*) gvp) PerCalibReadoutHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__calibHdrDictLN_PerCalibReadoutHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__calibHdrDict_448_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PerCalibReadoutHeader*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__calibHdrDict_448_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   PerCalibReadoutHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new PerCalibReadoutHeader(*(PerCalibReadoutHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__calibHdrDictLN_PerCalibReadoutHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PerCalibReadoutHeader G__TPerCalibReadoutHeader;
static int G__calibHdrDict_448_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PerCalibReadoutHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PerCalibReadoutHeader*) (soff+(sizeof(PerCalibReadoutHeader)*i)))->~G__TPerCalibReadoutHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PerCalibReadoutHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PerCalibReadoutHeader*) (soff))->~G__TPerCalibReadoutHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__calibHdrDict_448_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PerCalibReadoutHeader* dest = (PerCalibReadoutHeader*) G__getstructoffset();
   *dest = *(PerCalibReadoutHeader*) libp->para[0].ref;
   const PerCalibReadoutHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* PerCalibReadoutHeader */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunccalibHdrDict {
 public:
  G__Sizep2memfunccalibHdrDict(): p(&G__Sizep2memfunccalibHdrDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunccalibHdrDict::*p)();
};

size_t G__get_sizep2memfunccalibHdrDict()
{
  G__Sizep2memfunccalibHdrDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancecalibHdrDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__calibHdrDictLN_PerCalibReadoutHeader))) {
     PerCalibReadoutHeader *G__Lderived;
     G__Lderived=(PerCalibReadoutHeader*)0x1000;
     {
       PerHeaderObject *G__Lpbase=(PerHeaderObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__calibHdrDictLN_PerCalibReadoutHeader),G__get_linked_tagnum(&G__calibHdrDictLN_PerHeaderObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       PerTemporalDataObject *G__Lpbase=(PerTemporalDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__calibHdrDictLN_PerCalibReadoutHeader),G__get_linked_tagnum(&G__calibHdrDictLN_PerTemporalDataObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       RootIOBaseObject *G__Lpbase=(RootIOBaseObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__calibHdrDictLN_PerCalibReadoutHeader),G__get_linked_tagnum(&G__calibHdrDictLN_RootIOBaseObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablecalibHdrDict() {

   /* Setting up typedef entry */
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__calibHdrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__calibHdrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,RootIOUserDataProxy*>",117,G__get_linked_tagnum(&G__calibHdrDictLN_maplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,RootIOUserDataProxy*>",117,G__get_linked_tagnum(&G__calibHdrDictLN_maplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,RootIOUserDataProxy*,less<string> >",117,G__get_linked_tagnum(&G__calibHdrDictLN_maplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,ProxyCollection>",117,G__get_linked_tagnum(&G__calibHdrDictLN_maplEstringcOmaplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,map<string,RootIOUserDataProxy*,less<string>,allocator<pair<const string,RootIOUserDataProxy*> > > >",117,G__get_linked_tagnum(&G__calibHdrDictLN_maplEstringcOmaplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,map<string,RootIOUserDataProxy*,less<string>,allocator<pair<const string,RootIOUserDataProxy*> > >,less<string> >",117,G__get_linked_tagnum(&G__calibHdrDictLN_maplEstringcOmaplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__calibHdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__calibHdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__calibHdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__calibHdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<PerRef>",117,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEPerRefcOallocatorlEPerRefgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__calibHdrDictLN_reverse_iteratorlEvectorlEPerRefcOallocatorlEPerRefgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEPerRefcOallocatorlEPerRefgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__calibHdrDictLN_reverse_iteratorlEvectorlEPerRefcOallocatorlEPerRefgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEPerRefcOallocatorlEPerRefgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* PerCalibReadoutHeader */
static void G__setup_memvarPerCalibReadoutHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__calibHdrDictLN_PerCalibReadoutHeader));
   { PerCalibReadoutHeader *p; p=(PerCalibReadoutHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->site)-(long)(p)),104,0,0,-1,-1,-1,1,"site=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->detector)-(long)(p)),104,0,0,-1,-1,-1,1,"detector=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->triggerNumber)-(long)(p)),104,0,0,-1,-1,-1,1,"triggerNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->triggerType)-(long)(p)),104,0,0,-1,-1,-1,1,"triggerType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->triggerTimeSec)-(long)(p)),104,0,0,-1,-1,-1,1,"triggerTimeSec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->triggerTimeNanoSec)-(long)(p)),104,0,0,-1,-1,-1,1,"triggerTimeNanoSec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nHitsAD)-(long)(p)),104,0,0,-1,-1,-1,1,"nHitsAD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeAD)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"timeAD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chargeAD)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"chargeAD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hitCountAD)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"hitCountAD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ring)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"ring=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->column)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"column=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nHitsAD_calib)-(long)(p)),104,0,0,-1,-1,-1,1,"nHitsAD_calib=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timeAD_calib)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"timeAD_calib=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chargeAD_calib)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"chargeAD_calib=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hitCountAD_calib)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"hitCountAD_calib=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->topOrBottom)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"topOrBottom=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->acuColumn)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"acuColumn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nHitsPool)-(long)(p)),104,0,0,-1,-1,-1,1,"nHitsPool=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->timePool)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"timePool=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chargePool)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"chargePool=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hitCountPool)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"hitCountPool=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wallNumber)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"wallNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wallSpot)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"wallSpot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->inwardFacing)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"inwardFacing=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nHitsRpc)-(long)(p)),104,0,0,-1,-1,-1,1,"nHitsRpc=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rpcRow)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"rpcRow=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rpcColumn)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"rpcColumn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rpcLayer)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"rpcLayer=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rpcStrip)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<unsigned int>"),-1,1,"rpcStrip=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rpcFromRot)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__calibHdrDictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,1,"rpcFromRot=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarcalibHdrDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncPerCalibReadoutHeader(void) {
   /* PerCalibReadoutHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__calibHdrDictLN_PerCalibReadoutHeader));
   G__memfunc_setup("PerCalibReadoutHeader",2079,G__calibHdrDict_448_0_1, 105, G__get_linked_tagnum(&G__calibHdrDictLN_PerCalibReadoutHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__calibHdrDict_448_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("PerCalibReadoutHeader", 2079, G__calibHdrDict_448_0_3, (int) ('i'), 
G__get_linked_tagnum(&G__calibHdrDictLN_PerCalibReadoutHeader), -1, 0, 1, 1, 1, 0, "u 'PerCalibReadoutHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PerCalibReadoutHeader", 2205, G__calibHdrDict_448_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__calibHdrDict_448_0_5, (int) ('u'), G__get_linked_tagnum(&G__calibHdrDictLN_PerCalibReadoutHeader), -1, 1, 1, 1, 1, 0, "u 'PerCalibReadoutHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunccalibHdrDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalcalibHdrDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funccalibHdrDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__calibHdrDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__calibHdrDictLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__calibHdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__calibHdrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__calibHdrDictLN_maplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgR = { "map<string,RootIOUserDataProxy*,less<string>,allocator<pair<const string,RootIOUserDataProxy*> > >" , 99 , -1 };
G__linked_taginfo G__calibHdrDictLN_maplEstringcOmaplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgRsPgRsPgRsPgR = { "map<string,map<string,RootIOUserDataProxy*,less<string>,allocator<pair<const string,RootIOUserDataProxy*> > >,less<string>,allocator<pair<const string,map<string,RootIOUserDataProxy*,less<string>,allocator<pair<const string,RootIOUserDataProxy*> > > > > >" , 99 , -1 };
G__linked_taginfo G__calibHdrDictLN_RootIOBaseObject = { "RootIOBaseObject" , 99 , -1 };
G__linked_taginfo G__calibHdrDictLN_PerTemporalDataObject = { "PerTemporalDataObject" , 99 , -1 };
G__linked_taginfo G__calibHdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__calibHdrDictLN_PerHeaderObject = { "PerHeaderObject" , 99 , -1 };
G__linked_taginfo G__calibHdrDictLN_vectorlEPerRefcOallocatorlEPerRefgRsPgR = { "vector<PerRef,allocator<PerRef> >" , 99 , -1 };
G__linked_taginfo G__calibHdrDictLN_reverse_iteratorlEvectorlEPerRefcOallocatorlEPerRefgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<PerRef,allocator<PerRef> >::iterator>" , 99 , -1 };
G__linked_taginfo G__calibHdrDictLN_PerCalibReadoutHeader = { "PerCalibReadoutHeader" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablecalibHdrDict() {
  G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__calibHdrDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__calibHdrDictLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__calibHdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__calibHdrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__calibHdrDictLN_maplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgR.tagnum = -1 ;
  G__calibHdrDictLN_maplEstringcOmaplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__calibHdrDictLN_RootIOBaseObject.tagnum = -1 ;
  G__calibHdrDictLN_PerTemporalDataObject.tagnum = -1 ;
  G__calibHdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__calibHdrDictLN_PerHeaderObject.tagnum = -1 ;
  G__calibHdrDictLN_vectorlEPerRefcOallocatorlEPerRefgRsPgR.tagnum = -1 ;
  G__calibHdrDictLN_reverse_iteratorlEvectorlEPerRefcOallocatorlEPerRefgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__calibHdrDictLN_PerCalibReadoutHeader.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablecalibHdrDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__calibHdrDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__calibHdrDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__calibHdrDictLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__calibHdrDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__calibHdrDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__calibHdrDictLN_maplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__calibHdrDictLN_maplEstringcOmaplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOmaplEstringcORootIOUserDataProxymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcORootIOUserDataProxymUgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__calibHdrDictLN_RootIOBaseObject);
   G__get_linked_tagnum_fwd(&G__calibHdrDictLN_PerTemporalDataObject);
   G__get_linked_tagnum_fwd(&G__calibHdrDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__calibHdrDictLN_PerHeaderObject);
   G__get_linked_tagnum_fwd(&G__calibHdrDictLN_vectorlEPerRefcOallocatorlEPerRefgRsPgR);
   G__get_linked_tagnum_fwd(&G__calibHdrDictLN_reverse_iteratorlEvectorlEPerRefcOallocatorlEPerRefgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__calibHdrDictLN_PerCalibReadoutHeader),sizeof(PerCalibReadoutHeader),-1,296192,(char*)NULL,G__setup_memvarPerCalibReadoutHeader,G__setup_memfuncPerCalibReadoutHeader);
}
extern "C" void G__cpp_setupcalibHdrDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupcalibHdrDict()");
  G__set_cpp_environmentcalibHdrDict();
  G__cpp_setup_tagtablecalibHdrDict();

  G__cpp_setup_inheritancecalibHdrDict();

  G__cpp_setup_typetablecalibHdrDict();

  G__cpp_setup_memvarcalibHdrDict();

  G__cpp_setup_memfunccalibHdrDict();
  G__cpp_setup_globalcalibHdrDict();
  G__cpp_setup_funccalibHdrDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunccalibHdrDict();
  return;
}
class G__cpp_setup_initcalibHdrDict {
  public:
    G__cpp_setup_initcalibHdrDict() { G__add_setup_func("calibHdrDict",(G__incsetup)(&G__cpp_setupcalibHdrDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initcalibHdrDict() { G__remove_setup_func("calibHdrDict"); }
};
G__cpp_setup_initcalibHdrDict G__cpp_setup_initializercalibHdrDict;

